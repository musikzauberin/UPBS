dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network14.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/networkneg.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/networkneg.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.7,communities = 'neg')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/networkneg.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
dev.off()
f <- y~ a + b + c + b:c
update(f, .~. -b:c)
update(f, g~.)
f
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
################################################
# Set Directory
getwd()
setwd("/Users/jialelim/Documents/github/UPBS/newCode")
# Newly Added, extention of DataWrang.R
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
############# Transpose ###############
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
TempData
MyData
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
############# Transpose ###############
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
MyData
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
TempData
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
MyWrangledData
)
require(reshape2) # load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
variable.name = "Species", value.name = "Count")
MyWrangledData
TempData
head(MyData)
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
MyData
TempData
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
variable.name = "Species", value.name = "Count")
MyWrangledData
head(MyWrangledData)
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
library(reshape2)
library(plyr)
# Calculating total number of individuals per plot
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
?melt #check out the melt function
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
############# Start exploring the data!  ###############
# reorganising data
library(reshape2)
library(plyr)
# Calculating total number of individuals per plot
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
quadno
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
DF
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount
# rearrange into Plot Species and Count variables
DF.Count <- melt(DF.meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(DF.Count)
# reorder using plot number
PlotData <- DF.Count[order(DF.Count$Plot),]
head(PlotData)
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF.meancount <- DF[, ncol(DF)] / quadno * 8
quadno
DF.meancount <- DF[, ncol(DF)] / quadno[,2] * 8
DF.meancount
quadno[,2]
DF.meancount <- DF[, ncol(DF)] / melt(quadno[,2]) * 8
DF.meancount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
quadno
DF.meancount <- DF[, 1:ncol(DF)] / quadno[,2] * 8
DF.meancount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
quadno
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
DF.meancount <- totalcount / quadno[,2] * 8
DF.meancount
DF.Count <- melt(DF.meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(DF.Count)
# Let's visualise the spread of Counts for all Species
plot(Count~Species, data = MyWrangledData)
# most x labels cannot be seen due to lack of horizontal space
# Let's rotate the x labels
plot(Count~Species, data = MyWrangledData, las = 2)
# x labels still partially blocked
# Let's increase the margins
?par # what's par?
par(mar=c(12,5,1,1)) # adjust margins as needed
plot(Count~Species, data = MyWrangledData, las = 2)
# x axis label is hidden, lets move it down
par(mar=c(12,5,1,1))
plot(Count~Species, data = MyWrangledData, las = 2, xlab = "") # remove x axis label
mtext("Species", side=1, line=10, las = 1) # add manually
######## Calculating
meancount
################################################
# Set Directory
getwd()
setwd("/Users/jialelim/Documents/github/UPBS/newCode")
# Newly Added, extention of DataWrang.R
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
############# Transpose ###############
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt #check out the melt function
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
############# Start exploring the data! (General Visualisation) ###############
# Let's visualise the spread of Counts for all Species
plot(Count~Species, data = MyWrangledData)
# most x labels cannot be seen due to lack of horizontal space
# Let's rotate the x labels
plot(Count~Species, data = MyWrangledData, las = 2)
# x labels still partially blocked
# Let's increase the margins
?par # what's par?
par(mar=c(12,5,1,1)) # adjust margins as needed
plot(Count~Species, data = MyWrangledData, las = 2)
# x axis label is hidden, lets move it down
par(mar=c(12,5,1,1))
plot(Count~Species, data = MyWrangledData, las = 2, xlab = "") # remove x axis label
mtext("Species", side=1, line=10, las = 1) # add manually
library(reshape2)
library(plyr)
# Calculating total number of individuals per plot
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
quadno
# Calculate mean number of counts of each species per quadrat in each plot
# divide all columns by no.of quadrat per plot, multiply by 8 to calculate counts / m^2 for each species for each plot
meancount <- totalcount / quadno[,2] * 8
meancount
# rearrange into Plot Species and Count variables
head(totalcount)
head(quadno)
head(meancount)
# rearrange into Plot Species and Count variables
DF.Count <- melt(DF.meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
DF.Count <- melt(meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(DF.Count)
newDF <- melt(meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(newDF)
newDF <- melt(meancount, id=c("Plot", "Species"), value.name = "Count")
head(newDF)
newDF <- melt(meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
newDF <- melt(meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(newDF)
quadno
?ddply
MyWrangledData
head(MyWrangledData)
x.variables <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = Block)
x.variables
head(x.variables)
x.variables <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = unique(Block))
head(x.variables)
x.variables <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = unique(Block, Cultivation))
head(x.variables)
head(MyWrangledData)
x.variables <- ddply(MyWrangledData, c("Plot"), summarise, Block = unique(Block), Cultivation = unique(Cultivation))
head(x.variables)
x.variables <- ddply(MyWrangledData, Plot, summarise, Block = unique(Block), Cultivation = unique(Cultivation))
x.variables <- ddply(MyWrangledData, unique(c("Plot")), summarise, Block = unique(Block), Cultivation = unique(Cultivation))
head(x.variables)
x.variables <- ddply(MyWrangledData, unique(c("Plot")), summarise, Block = Block, Cultivation = unique(Cultivation))
x.variables <- ddply(MyWrangledData, c(unique("Plot")), summarise, Block = Block, Cultivation = unique(Cultivation))
x.variables <- ddply(MyWrangledData, c("Plot"), summarise, Block = unique(Block), Cultivation = unique(Cultivation))
x.variables
tempDF <- cbind(meancount, x.variables[,2:3])
head(tempDF)
head(meancount)
head(x.variables)
tempDF <- cbind(meancount, x.variables[,2:3])
head(tempDF)
MyNewDF <- melt(tempDF, id=c("Cultivation", "Block", "Plot"),
variable.name = "Species", value.name = "Count")
tempDF <- cbind(meancount, x.variables)
head(tempDF)
MyNewDF <- melt(tempDF, id=c("Cultivation", "Block", "Plot"),
variable.name = "Species", value.name = "Count")
head(MyNewDF)
str(MyNewDF)
?sapply
?replace
PADF[PADF[,5] > 0, 5] <- 1 #{PADF[,5] > 0}: all values more than 0 in the fifth column of PADF
PADF <- MyNewDF
PADF[PADF[,5] > 0, 5] <- 1 #{PADF[,5] > 0}: all values more than 0 in the fifth column of PADF
head(PADF)
head(PADF)
PAData <- MyNewDF
PAData[PAData[,5] > 0, 5] <- 1 #{PADF[,5] > 0}: all values more than 0 in the fifth column of PADF
head(PADF)
SpeciesPerPlot <- tapply(PAData$Count, list(PAData$Plot), sum, na.rm = TRUE)
SpeciesPerPlot
SpeciesPerPlot <- tapply(PAData$Count, list(PAData$Plot, PAData$Block), sum, na.rm = TRUE)
SpeciesPerPlot
SpeciesPerPlot <- ddply(PAData, c("Plot"), sum, SpeciesNo = sum(Count))
head(PAData)
?sum
SpeciesPerPlot <- ddply(PAData, c("Plot"), summarise, SpeciesNo = sum(Count))
SpeciesPerPlot
SpeciesPerPlot <- ddply(PAData, c("Block", "Plot"), summarise, SpeciesNo = sum(Count))
SpeciesPerPlot
head(PAData)
SpeciesPerPlot <- ddply(PAData, c("Cultivation", "Block", "Plot"), summarise, SpeciesNo = sum(Count))
SpeciesPerPlot
SpeciesRichness <- ddply(PAData, c("Cultivation", "Block", "Plot"), summarise, SpeciesNo = sum(Count))
SpeciesRichness
sum(SpeciesRichness$SpeciesNo)
head(MyNewDF)
PAData[PAData[,5] > 0, 5] <- 1 #{PADF[,5] > 0}: all values more than 0 in the fifth column of PADF
head(PAData)
write.csv(SpeciesRichness, file = "../Result/PoundHillSpeciesRichness.csv", row.names = FALSE)
write.csv(SpeciesRichness, file = "../Result/PoundHillSpeciesRichness.csv")
write.csv(SpeciesRichness, file = "../Results/PoundHillSpeciesRichness.csv")
write.csv(MyNewDF, file = "../Results/PoundHillMean.csv")
head(SpeciesRichness)
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
labs(x = "Type of feeding interaction", y = "log (Prey mass / Predator Mass)") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
labs(x = "Type of feeding interaction", y = "log (Prey mass / Predator Mass)") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
library(ggplot2)
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
labs(x = "Type of feeding interaction", y = "log (Prey mass / Predator Mass)") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(lwd = 0.6)  +
# lwd dictates thickness of outlines
labs(x = "Type of feeding interaction", y = "log (Prey mass / Predator Mass)") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(lwd = 0.6)  +
# lwd dictates thickness of outlines
labs(x = "Type of feeding interaction", y = "log (Prey mass / Predator Mass)") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
geom_boxplot()  +
# lwd dictates thickness of outlines
labs(x = "Type of feeding interaction", y = "log (Prey mass / Predator Mass)") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot()  +
theme(legend.position="none") # remove all legends
boxplot
?toupper
toupper(SpeciesRichness$Cultivation)
simpleCap(SpeciesRichness$Cultivation)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
simpleCap(SpeciesRichness$Cultivation)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = "")
}
simpleCap(SpeciesRichness$Cultivation)
simpleCap <- function(x) {
s <- strsplit(x, "")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = "")
}
simpleCap(SpeciesRichness$Cultivation)
capFirst <- function(s) {
paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "")
}
capFirst(SpeciesRichness$Cultivation)
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot()  +
geom_jitter() +
# lwd dictates thickness of outlines
labs(x = "Cultivation month", y = "Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot()  +
geom_point() +
# lwd dictates thickness of outlines
labs(x = "Cultivation month", y = "Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot()  +
geom_jitter(width = 0.3) +
# lwd dictates thickness of outlines
labs(x = "Cultivation month", y = "Number of Species")# x and y axis labels
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(aes(fill = Cultivation), alpha = 0.3)  +
geom_jitter(width = 0.3) +
labs(x = "Cultivation month", y = "Mean Number of Species") # x and y axis labels
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(aes(fill = Cultivation), alpha = 0.3)  +
geom_jitter(width = 0.3) +
labs(x = "Cultivation month", y = "Mean Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(aes(fill = Cultivation), alpha = 0.3)  +
geom_jitter(aes(fill = Cultivation), width = 0.3, alpha = 0.7, size = 3) +
labs(x = "Cultivation month", y = "Mean Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(aes(fill = Cultivation), alpha = 0.3)  +
geom_jitter(aes(fill = Cultivation), width = 0.3, alpha = 0.5, size = 2) +
labs(x = "Cultivation month", y = "Mean Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(aes(fill = Cultivation), alpha = 0.3)  +
geom_jitter(aes(fill = Cultivation), width = 0.3, alpha = 0.5, size = 2) +
labs(x = "Cultivation month", y = "Mean Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(aes(fill = Cultivation), alpha = 0.3)  +
geom_jitter(aes(fill = Cultivation), width = 0.3, alpha = 0.5, size = 2) +
labs(x = "Cultivation month", y = "Mean Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
ggsave('../Results/PoundHill_CultivationSpeciesRichness.pdf', height=5, width=10)
boxplot2 <- ggplot(SpeciesRichness, aes(x = Block, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(aes(fill = Block), alpha = 0.3)  +
geom_jitter(aes(fill = Block), width = 0.3, alpha = 0.5, size = 2) +
labs(x = "Treatment Block", y = "Mean Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot2
ggsave('../Results/PoundHill_CultivationSpeciesRichness.pdf', height=5, width=10)
library(ggplot2)
boxplot <- ggplot(SpeciesRichness, aes(x = Cultivation, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(aes(fill = Cultivation), alpha = 0.3)  +
geom_jitter(aes(fill = Cultivation), width = 0.3, alpha = 0.5, size = 2) +
labs(x = "Cultivation month", y = "Mean Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot
ggsave('../Results/PoundHill_CultivationSpeciesRichness.pdf', height=5, width=10)
boxplot2 <- ggplot(SpeciesRichness, aes(x = Block, y = SpeciesNo)) +
stat_boxplot(geom = 'errorbar') +           # add whiskers to boxplots
geom_boxplot(aes(fill = Block), alpha = 0.3)  +
geom_jitter(aes(fill = Block), width = 0.3, alpha = 0.5, size = 2) +
labs(x = "Treatment Block", y = "Mean Number of Species") + # x and y axis labels
theme(legend.position="none") # remove all legends
boxplot2
ggsave('../Results/PoundHill_BlockSpeciesRichness.pdf', height=5, width=10)
