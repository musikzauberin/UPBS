means <- ddply(melted, c("Plot"), sum, # find mean of value/logCC grouped by strain and treatment
sum = mean(value))
means <- ddply(melted, c("Plot"), summarise, # find mean of value/logCC grouped by strain and treatment
sum = mean(value))
means
means <- ddply(melted, c("Plot"), summarise, # find mean of value/logCC grouped by strain and treatment
count = count(value))
means <- ddply(melted, c("Plot"), summarise, # find mean of value/logCC grouped by strain and treatment
count = length(value))
means
aggregate(Quadrat ~ Plot, data = MyWrangledData)
aggregate(Quadrat ~ Plot, length, data = MyWrangledData)
?uniq
?unique
aggregate(Quadrat ~ Plot, unique , data = MyWrangledData)
aggregate(Quadrat ~ Plot, length(unique) , data = MyWrangledData)
totalcount <- aggregate(Quadrat ~ Plot, unique , data = MyWrangledData)
totalcount
totalcount$Quadrant
totalcount$Quadrat
aggregate(Quadrat ~Plot, unique, data = totalcount)
aggregate(Quadrat ~ Plot, unique, data = totalcount)
aggregate(Quadrat ~ Plot, totalcount, unique)
totalcount <- aggregate(Quadrat ~ Plot, unique , data = MyWrangledData)
aggregate(Quadrat ~ Plot, unique , data = totalcount)
totalcount <- aggregate(Quadrat ~ Plot, length | unique , data = MyWrangledData)
totalcount <- aggregate(Quadrat ~ Plot, unique | length, data = MyWrangledData)
count(Quadrat, Plot, MyWrangledData)
count(MyWrangledData, Quadrat, Plot)
?count
count(MyWrangledData, unique(Quadrat), Plot)
totalcount <- aggregate(Quadrat ~ Plot, length , data = MyWrangledData)
totalcount
totalcount <- aggregate(Quadrat ~ Plot + Block, length , data = MyWrangledData)
totalcount
head(melted)
means <- ddply(melted, c("Plot"), unique, # find mean of value/logCC grouped by strain and treatment
count = length(value))
means
means <- ddply(melted, c("Plot"), unique, # find mean of value/logCC grouped by strain and treatment
count = count(value))
means
head(melted)
?ddply
means <- ddply(melted, c("Plot"), summarise, # find mean of value/logCC grouped by strain and treatment
count = count(value))
?summarsie
?summarise
means <- ddply(melted, c("Plot"), summarise, # find mean of value/logCC grouped by strain and treatment
value = length(unique(value)))
means
means <- ddply(melted, c("Plot"), summarise, # find mean of value/logCC grouped by strain and treatment
Quadrat.number = length(unique(value)))
means
head(melted)
means <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
means
means <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
means
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
############# Transpose ###############
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt #check out the melt function
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
############# Start exploring the data!  ###############
# Let's visualise the spread of Counts for all Species
plot(Count~Species, data = MyWrangledData)
# most x labels cannot be seen due to lack of horizontal space
# Let's rotate the x labels
plot(Count~Species, data = MyWrangledData, las = 2)
# x labels still partially blocked
# Let's increase the margins
?par # what's par?
par(mar=c(12,5,1,1)) # adjust margins as needed
plot(Count~Species, data = MyWrangledData, las = 2)
# x axis label is hidden, lets move it down
par(mar=c(12,5,1,1))
plot(Count~Species, data = MyWrangledData, las = 2, xlab = "") # remove x axis label
mtext("Species", side=1, line=10, las = 1) # add manually
# reorganising data
library(reshape2)
library(plyr)
means <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
means
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
means <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
means
totalcount$Quadrat.number <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
totalcount$Quadrat.number <- quadno
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
totalcount$Quadrat.number <- quadno
totalcount
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
totalcount$Quadrat.number <- quadno
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
totalcount[, "Quadrat.no"] <- quadno
unlist(quadno)
totalcount[, "Quadrat.no"] <- unlist(quadno)
totalcount
as.factor(totalcount)
quadno
quadno$Quadrat.number
totalcount[, "Quadrat.no"] <- quadno$Quadrat.number
totalcount[, "Quadrat.no"] <- as.vector(quadno$Quadrat.number)
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
totalcount[, "Quadrat.no"] <- as.vector(quadno$Quadrat.number)
as.vector(quadno$Quadrat.number)
totalcount
totalcount["Quadrat.no", ] <- as.vector(quadno$Quadrat.number)
totalcount[, "Quadrat.no"] <- as.factor(quadno$Quadrat.number)
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
as.factor(totalcount)
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
############# Transpose ###############
head(MyData)
MyData <- t(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt #check out the melt function
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
library(reshape2)
library(plyr)
# Calculating total number of individuals per plot
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
totalcount[, "Quadrat.no"] <- as.factor(quadno$Quadrat.number)
cbind(totalcount, quadno$Quadrat.number )
totalcount[, "Quadrat.no"] <- totalcount[, -1]
totalcount[, "Quadrat.no"] <- totalcount[, -1]
totalcount[, -1]
cbind(totalcount, quadno$Quadrat.number)
totalcount[, ncol(data)] <- c("Quadrat.no")
totalcount
cbind(totalcount, quadno$Quadrat.number)
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
DF.meancount <- cbind(totalcount, quadno$Quadrat.number)
DF.meancount[, ncol(data)] <- c("Quadrat.no")
DF.meancount
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
colnames(DF.meancount)[ncol(data)] <- "Quadrat.no"
DF.meancount
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF.meancount <- cbind(totalcount, quadno$Quadrat.number)
DF.meancount[, ncol(data)] <- c("Quadrat.no")
DF.meancount
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF.meancount <- cbind(totalcount, quadno$Quadrat.number)
colnames(DF.meancount)[ncol(DF.meancount)] <- "Quadrat.no"
DF.meancount
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF.meancount <- cbind(totalcount, quadno$Quadrat.number)
colnames(DF.meancount)[ncol(DF.meancount)] <- "Quadrat.no"
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
DF.meancount <- DF[, 1:(ncol(DF)-1)]/DF[, ncol(DF)]
DF.meancount
df1[-(1:2)] <- df1[-(1:2)]/df1[,2][row(df1[-(1:2)])]*8
DF.meancount <- DF[, 1:(ncol(DF)-1)]/DF[, ncol(DF)]*8
DF.meancount
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
head(MyWrangledData)
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Cultivation, MyWrangledData$Block, MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
# Calculate mean number of counts of each species per quadrat in each plot
# divide all columns except the last column by the last column (no.of quadrat per plot)
# multiply by 8 to calculate counts / m^2 for each species for each plot
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount
DF.meancount[order(DFx), ]
DF.meancount[order(DF[,1]), ]
DF[0]
DF[0,]
DF[,0]
DF.meancount[order(DF[,0]), ]
DF.meancount[order(DF[,0])]
DF.meancount[, order(DF[,0])]
DF.meancount[, order(DF.meancount[,0])]
DF.meancount[, order(DF.meancount[,0])]
DF.meancount[order(DF.meancount[,0]), ]
DF.meancount[order(DF.meancount[,0])]
?order
order(DF.meancount[,0]), decreasing = TRUE]
order(DF.meancount[,0], decreasing = TRUE)
DF.meancount[order(DF.meancount, decreasing = TRUE)]
DF.meancount
DF.meancount[order(DF.meancount[0,], decreasing = TRUE)]
DF.meancount[order(DF.meancount[0,]), ]
DF.meancount[,order(DF.meancount[0,])]
DF.new <- DF.meancount[order(DF.meancount[0,]), ]
DF.new
DF.meancount[0,]
DF.meancount[0, ]
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount[0, ]
DF.meancount[-1, ]
DF.meancount
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount
DF.new <- DF.meancount[order(DF.meancount[0,]), ]
DF.new
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount$Plot
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
totalcount
hi <- melt(totalcount, id=c("Plot", "Species"), value.name = "Count")
hi
hi <- melt(totalcount, id=c("Plot", "Species"),
variable.name = c("Plot", "Species") , value.name = "Count")
hi
DF
hi <- melt(DF, id=c("Plot", "Species"),
variable.name = c("Plot", "Species") , value.name = "Count")
hi
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
hi <- melt(DF, id=c("Plot", "Species", "Quadrat.no"),
variable.name = c("Plot", "Species", "Quadrat.no") , value.name = "Count")
hi
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount
DF.meancount$Plot
hi <- melt(DF.meancount, id=c("Plot", "Species"),
variable.name = c("Plot", "Species") , value.name = "Count")
hi
hi <- melt(DF.meancount, id=c("Plot", "Species"),
variable.names = c("Plot", "Species") , value.name = "Count")
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount
hi <- melt(DF.meancount, id=c("Plot", "Species"),
variable.names = c("Plot", "Species") , value.name = "Count")
hi
hi <- melt(DF.meancount, id=c("Plot", "Species"),
id.names = c("Plot", "Species") , value.name = "Count")
hi
head(hi)
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount
?melt
hi <- melt(DF.meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(hi)
DF.Count <- melt(DF.meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
# reorganising data
library(reshape2)
library(plyr)
# Calculating total number of individuals per plot
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
# Calculate mean number of counts of each species per quadrat in each plot
# divide all columns except the last column by the last column (no.of quadrat per plot)
# multiply by 8 to calculate counts / m^2 for each species for each plot
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount
# rearrange into Plot Species and Count variables
DF.Count <- melt(DF.meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(DF.Count)
newdata <- DF.Count[order(Plot),]
newdata <- DF.Count[order(DF.Count$Plot),]
newdata
PlotData[, lapply(.SD, round, 2), Count]
PlotData <- DF.Count[order(DF.Count$Plot),]
PlotData[, lapply(.SD, round, 2), Count]
head(PlotData)
PlotData[, lapply(.SD, round, 2), Count]
PlotData[, lapply(.SD, round, 2), PlotDataCount]
PlotData[, lapply(.SD, round, 2), PlotData$Count]
PlotData[, lapply(PlotData$Count, round, 2), PlotData$Count]
PlotData[, sapply(PlotData$Count, round, 2), PlotData$Count]
PlotData[PlotData$Count, sapply(PlotData$Count, round, 2)]
PlotData[, PlotData$Count, sapply(PlotData$Count, round, 2)]
PlotData[, sapply(PlotData$Count, round, 2)]
PlotData <- DF.Count[order(DF.Count$Plot),]
PlotData[, Count, round(PlotData[, Count], 2)]
PlotData[, Count, round(PlotData[, ncol(PlotData)], 2)]
PlotData[, ncol(PlotData), round(PlotData[, ncol(PlotData)], 2)]
PlotData
PlotData <- PlotData[, ncol(PlotData), round(PlotData[, ncol(PlotData)], 1)]
PlotData
PlotData <- DF.Count[order(DF.Count$Plot),]
head(PlotData)
PlotData <- DF.Count[order(DF.Count$Plot),]
head(PlotData)
DF.Count <- melt(DF.meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(DF.Count)
# reorder using plot number
PlotData <- DF.Count[order(DF.Count$Plot),]
head(PlotData)
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
############# Transpose ###############
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
############# Convert raw matrix to data frame ###############
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt #check out the melt function
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
############# Start exploring the data!  ###############
# Let's visualise the spread of Counts for all Species
plot(Count~Species, data = MyWrangledData)
# most x labels cannot be seen due to lack of horizontal space
# Let's rotate the x labels
plot(Count~Species, data = MyWrangledData, las = 2)
# x labels still partially blocked
# Let's increase the margins
?par # what's par?
par(mar=c(12,5,1,1)) # adjust margins as needed
plot(Count~Species, data = MyWrangledData, las = 2)
# x axis label is hidden, lets move it down
par(mar=c(12,5,1,1))
plot(Count~Species, data = MyWrangledData, las = 2, xlab = "") # remove x axis label
mtext("Species", side=1, line=10, las = 1) # add manually
# reorganising data
library(reshape2)
library(plyr)
# Calculating total number of individuals per plot
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
library(reshape2)
library(plyr)
# Calculating total number of individuals per plot
totalcount <- tapply(MyWrangledData$Count, list(MyWrangledData$Plot, MyWrangledData$Species), sum, na.rm = TRUE)
totalcount
# Calculate number of quadrats per plot and store as column in totalcount
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
# Calculate mean number of counts of each species per quadrat in each plot
# divide all columns except the last column by the last column (no.of quadrat per plot)
# multiply by 8 to calculate counts / m^2 for each species for each plot
DF.meancount <- DF[, 1:(ncol(DF)-1)] / DF[, ncol(DF)] *8
DF.meancount
# rearrange into Plot Species and Count variables
DF.Count <- melt(DF.meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(DF.Count)
# reorder using plot number
PlotData <- DF.Count[order(DF.Count$Plot),]
head(PlotData)
PlotData[Count > 0] <- 1
PlotData[, Count > 0] <- 1
PlotData[, PlotData$Count > 0] <- 1
head(PlotData)
?replace
PlotData[, Count]
PlotData[Count]
PlotData$Count > 0 <- 1
[PlotData$Count > 0] <- 1
PlotData[,3]
PlotData[PlotData[,3] > 0, 3] <- 1
PlotData
SpeciesPerPlot <- tapply(PlotData$Count, list(PlotData$Plot), sum, na.rm = TRUE)
SpeciesPerPlot
plot(SpeciesPerPlot)
head(PlotData)
DF.Count <- melt(DF.meancount, id=c("Plot", "Species"),
varnames = c("Plot", "Species") , value.name = "Count")
head(DF.Count)
quadno <- ddply(MyWrangledData, c("Plot"), summarise, Quadrat.number = length(unique(Quadrat)))
DF <- cbind(totalcount, quadno$Quadrat.number) # combine columns of totalcount and quadrat.no
colnames(DF)[ncol(DF)] <- "Quadrat.no" # add column name to last column of DF.meancount
DF
SpeciesPerPlot <- tapply(PlotData$Count, list(PlotData$Plot, PlotData$Treatment, ), sum, na.rm = TRUE)
PlotData[PlotData[,3] > 0, 3] <- 1
SpeciesPerPlot <- tapply(PlotData$Count, list(PlotData$Plot, PlotData$Treatment, ), sum, na.rm = TRUE)
SpeciesPerPlot <- tapply(PlotData$Count, list(PlotData$Plot, PlotData$Treatment), sum, na.rm = TRUE)
PlotData <- DF.Count[order(DF.Count$Plot),]
head(PlotData)
# replace Count with presence/absence data # PlotData[,3] 3rd column of PlotData
PlotData[PlotData[,3] > 0, 3] <- 1
SpeciesPerPlot <- tapply(PlotData$Count, list(PlotData$Plot, PlotData$Treatment), sum, na.rm = TRUE)
SpeciesPerPlot <- tapply(PlotData$Count, list(PlotData$Plot), sum, na.rm = TRUE)
SpeciesPerPlot
plot(SpeciesPerPlot)
head(MyWrangledData)
