dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network11.pdf", width=15, height=15)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network11.pdf", width=10, height=10)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network12.pdf", width=10, height=10)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network12.pdf", width=12, height=10)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network12.pdf", width=12, height=10)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network12.pdf", width=12, height=12)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network12.pdf", width=12, height=12)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network12.pdf", width=12, height=12)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network13.pdf", width=12.5, height=12.5)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network13.pdf", width=12.5, height=12.5)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network13.pdf", width=12.5, height=12.5)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network13.pdf", width=12.5, height=12.5)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network13.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network14.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'pos')
dev.off()
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/network15.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/networkneg.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/networkneg.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.7,communities = 'neg')
dev.off()
source("~/Desktop/R/BG_prac/script/pie-1-master/cluster.plot.R")
d <- read.csv('~/Desktop/R/BG_prac/data/pie1_transcript.csv', header = TRUE, check.names=FALSE)
pdf(file = "~/Desktop/R/BG_prac/result/networkneg.pdf", width=13, height=13)
cluster.plot(df=d,cor='pearson',cut.off=0.8,communities = 'neg')
dev.off()
f <- y~ a + b + c + b:c
update(f, .~. -b:c)
update(f, g~.)
f
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
# header = true because we do have metadata headers
install.packages(c("boot", "class", "cluster", "codetools", "colorspace", "digest", "foreign", "gdata", "ggplot2", "gplots", "gtable", "gtools", "KernSmooth", "lattice", "manipulate", "MASS", "mgcv", "multcomp", "munsell", "mvtnorm", "nnet", "plyr", "Rcpp", "rJava", "rpart", "sandwich", "scales", "spatial", "survival", "TH.data", "zoo"))
getwd()
setwd("/Users/jialelim/Documents/github/UPBS/newCode")
################################################
# 1) Load the data
colonies <- read.csv("../Data/PracData.csv")
str(colonies)
# 2) Look at all the data
boxplot(ColonyCount ~ Treatment, data=colonies)
colonies$logCC <- log(colonies$ColonyCount + 1)
boxplot(logCC ~ Treatment, data=colonies)
# 3) Check the variation i colony count across treatments
tapply(colonies$ColonyCount, colonies$Treatment, min, na.rm=TRUE)
tapply(colonies$ColonyCount, colonies$Treatment, max, na.rm=TRUE)
# 4) Subset the data down to control and NG
coloniesCN <- subset(colonies, Treatment %in% c('Control', 'NG'), drop=TRUE)
str(coloniesCN)
# remove the unused levels
coloniesCN <- droplevels(coloniesCN)
str(coloniesCN)
# 5a) Look at the strains by treament
library(lattice)
bwplot(logCC ~ Strain | Treatment, data=coloniesCN)
# alternatively, get a barplot
tab <- tapply(coloniesCN$ColonyCount, list(coloniesCN$Treatment,
coloniesCN$Strain), mean, na.rm=TRUE)
barplot(tab, beside=TRUE)
######################################################
# 5b) Plot boxplot using ggplot2 # Newly Added
library(ggplot2)
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment, colour = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.colour = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.colour = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment, colour = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.colour = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment, colour = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
library(ggplot2)
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.color = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment, color = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment, colour = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
# 5b) Plot boxplot using ggplot2 # Newly Added
library(ggplot2)
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment, colour = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment, colour = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.colour = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment, colour = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot()
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot()
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.color = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.color = NULL, aes(color= Treatment))
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.color = NULL, aes(color = Treatment), alpha = 0.4)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.color = NULL, aes(color = Treatment), alpha = 0.6)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.color = NULL, color = 'black', alpha = 0.6)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL, color = 'black', alpha = 0.6)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.color = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.fill = NULL)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.color = NULL, aes(color = Treatment), alpha = 0.6)
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
stat_boxplot(geom = 'errorbar') +
geom_boxplot(outlier.color = NULL, aes(color = Treatment))
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
geom_boxplot(outlier.color = NULL, aes(color = Treatment)) +
stat_boxplot(geom = 'errorbar')
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
geom_boxplot(outlier.color = NULL, aes(color = Treatment)) +
stat_boxplot(geom = 'errorbar')
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
stat_boxplot(geom = 'errorbar') + # add whiskers to boxplots
geom_boxplot(outlier.color = NULL) #
p1
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
stat_boxplot(geom = 'errorbar') + # add whiskers to boxplots
geom_boxplot() #
p1
barplot(tab, beside=TRUE)
library(ggplot2)
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
stat_boxplot(geom = 'errorbar') + # add whiskers to boxplots
geom_boxplot() # add boxplots
p1
p2 <- p1 + labs(x = "Strains", y = "log Colony Count") +
theme(axis.title = element_text(size = 16))
p2
ggsave('../Results/PracDataBoxplot_ggplot.pdf', height=5, width=6) #Open the pdf file
p2 <- p1 + labs(x = "Strains", y = "log Colony Count")
p2
# save plot as pdf
ggsave('../Results/PracDataBoxplot_ggplot.pdf', height=5, width=6) #Open the pdf file
ggsave('../Results/PracDataBoxplot_ggplot.pdf', height=5, width=6) #Open the pdf file
p2 <- p1 + labs(x = "Strains", y = "log Colony Count")
p2
# save plot as pdf
ggsave('../Results/PracDataBoxplot_ggplot.pdf', height=5, width=6) #Open the pdf file
barplot1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment))
geom_barplot() # add boxplots
barplot1
barplot1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment))
geom_bar() # add boxplots
barplot1
barplot1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment))
geom_bar(stat = "identity") # add boxplots
barplot1
barplot1 <- ggplot(tab, aes(x = Strain, y = logCC, color = Treatment))
geom_bar(stat = "identity") # add boxplots
barplot1
tab <- tapply(coloniesCN$ColonyCount, list(coloniesCN$Treatment,
coloniesCN$Strain), mean, na.rm=TRUE)
barplot(tab, beside=TRUE)
tab
getwd()
setwd("/Users/jialelim/Documents/github/UPBS/newCode")
################################################
# 1) Load the data
colonies <- read.csv("../Data/PracData.csv")
str(colonies)
# 2) Look at all the data
boxplot(ColonyCount ~ Treatment, data=colonies)
colonies$logCC <- log(colonies$ColonyCount + 1)
boxplot(logCC ~ Treatment, data=colonies)
# 3) Check the variation i colony count across treatments
tapply(colonies$ColonyCount, colonies$Treatment, min, na.rm=TRUE)
tapply(colonies$ColonyCount, colonies$Treatment, max, na.rm=TRUE)
# 4) Subset the data down to control and NG
coloniesCN <- subset(colonies, Treatment %in% c('Control', 'NG'), drop=TRUE)
str(coloniesCN)
# remove the unused levels
coloniesCN <- droplevels(coloniesCN)
str(coloniesCN)
# 5a) Look at the strains by treament
library(lattice)
bwplot(logCC ~ Strain | Treatment, data=coloniesCN)
# alternatively, get a barplot
tab <- tapply(coloniesCN$ColonyCount, list(coloniesCN$Treatment,
coloniesCN$Strain), mean, na.rm=TRUE)
barplot(tab, beside=TRUE)
######################################################
# 5b) Plot boxplot using ggplot2 # Newly Added
library(ggplot2)
p1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
stat_boxplot(geom = 'errorbar') + # add whiskers to boxplots
geom_boxplot() # add boxplots
p1
# set text and text size for axis
p2 <- p1 + labs(x = "Strains", y = "log Colony Count")
p2
# save plot as pdf
ggsave('../Results/PracDataBoxplot_ggplot.pdf', height=5, width=6) #Open the pdf file
# 5b) Plot barplot using ggplot2 # Newly Added
barplot1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment))
geom_bar(stat = "identity") # add boxplots
barplot1
# set text and text size for axis
barplot1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
geom_bar(stat = "identity") # add boxplots
barplot1
barplot1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, color = Treatment)) +
geom_bar(stat = "identity", position=position_dodge()) # add boxplots
barplot1
barplot1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
geom_bar(stat = "identity", position=position_dodge()) # add boxplots
barplot1
barplot1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
geom_bar(stat = "identity", position=position_dodge(), color = "black") # add boxplots
barplot1
barplot2 <-  barplot1 + scale_fill_brewer(palette="Blues")
barplot2
barplot2 <-  barplot1 + scale_fill_brewer(palette="Paired")
barplot2
barplot3 <- barplot2 +
geom_text(aes(label=len), vjust=1.6, color="white", position = position_dodge(0.9), size=3.5)
barplot3
barplot3 <- barplot2 +
geom_text(aes(label=logCC), vjust=1.6, color="white", position = position_dodge(0.9), size=3.5)
barplot3
tab
barplot1 <- ggplot(tab, aes(x = Strain, y = logCC, fill = Treatment)) +
geom_bar(stat = "identity", position=position_dodge(), # add barplots, unstacked/dodged barplot
color = "black") # add black outlines
barplot1
as.data.frame(tab)
barplot1 <- ggplot(tab, aes(x = Strain, y = logCC, fill = Treatment)) +
geom_bar(stat = "identity", position=position_dodge(), # add barplots, unstacked/dodged barplot
color = "black") # add black outlines
barplot1
barplot1 <- ggplot(as.data.frame(tab), aes(x = Strain, y = logCC, fill = Treatment)) +
geom_bar(stat = "identity", position=position_dodge(), # add barplots, unstacked/dodged barplot
color = "black") # add black outlines
barplot1
barplot1 <- ggplot(coloniesCN, aes(x = Strain, y = logCC, fill = Treatment)) +
geom_bar(stat = "identity", position=position_dodge(), # add barplots, unstacked/dodged barplot
color = "black") # add black outlines
barplot1
# lets change the colours
barplot2 <-  barplot1 + scale_fill_brewer(palette="Paired")
barplot2
tab
logCC
coloniesCN$logCC
# alternatively, get a barplot
tab <- tapply(coloniesCN$ColonyCount, list(coloniesCN$Treatment,
coloniesCN$Strain), mean, na.rm=TRUE)
barplot(tab, beside=TRUE)
tab
Bactframe <- as.data.frame(tab)
# Set Directory
getwd()
setwd("/Users/jialelim/Documents/github/UPBS/newCode")
################################################
# This script uses genome size and morphology data to explore regression in R
# (1) Load the data
genome <- read.csv('../Data/GenomeSize.csv')
# (2) look at pairwise plots of all variables
pairs(genome)
# (3) identify the column numbers of five key variables and produce pairs plots
morpho <- c(4,7,8,12,14)
pairs(genome[, morpho], col=genome$Suborder)
# (4) Look at pairwise correlation coefficients and a correlation test
cor(genome[, morpho], use='pairwise')
cor.test(genome$GenomeSize, genome$TotalLength, use='pairwise')
# (5) log transform the key variables
genome$logGS <- log(genome$GenomeSize)
genome$logBW <- log(genome$BodyWeight)
genome$logTL <- log(genome$TotalLength)
genome$logFL <- log(genome$ForewingLength)
genome$logFA <- log(genome$ForewingArea)
str(genome)
# (6) get the columns of the transformed variables and repeat pairs and cor
logmorpho <- c(17,18,19,20,21)
# pair plots of log variables
pairs(genome[, logmorpho], col=genome$Suborder)
# correlation coefficient for log variables
cor(genome[, logmorpho], use='pairwise')
# (7) fit the null and genome size model for dragonflies
nullModDragon <- lm(logBW ~ 1, data=genome, subset=Suborder=='Anisoptera')
genomeSizeModelDragon <- lm(logBW ~ logGS, data=genome, subset=Suborder=='Anisoptera')
summary(genomeSizeModelDragon)
anova(genomeSizeModelDragon)
# residual sums of squares for the two models
sum(resid(nullModDragon)^2)
sum(resid(genomeSizeModelDragon)^2)
# (8) fit the genome size model for damselflies
genomeSizeModelDamsel <- lm(logBW ~ logGS, data=genome, subset=Suborder=='Zygoptera')
summary(genomeSizeModelDamsel)
anova(genomeSizeModelDamsel)
# (9) Examine model diagnostics
# pdf("../Results/DiagModDragon.pdf")
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 1.5))
plot(genomeSizeModelDragon)
# dev.off()
# pdf("../Results/DiagModDamsel.pdf")
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 1.5))
plot(genomeSizeModelDamsel)
# dev.off()
# (10) Plot the model and add regression lines
pdf("../Results/DiagMod.pdf")
myCol <- c('red','blue')
plot(logBW ~ logGS, data=genome, col=myCol[Suborder], xlab='log Genome Size (pg)', ylab='log Body Weight (g)')
abline(genomeSizeModelDragon, col='red')
abline(genomeSizeModelDamsel, col='blue')
dev.off()
######################################################
# (11) Plot model and add regression lines using ggplot2 # Newly Added
library(ggplot2)
# basic plot
# differentiate Suborder by shape and color
p1 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_point(aes(shape = Suborder, color = Suborder), size = 4) + # increase size of plot characters to show overlap
scale_shape(solid = FALSE) + # outline of plot character
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 +
geom_smooth(aes(color = Suborder),
method = 'lm',          # linear regression
alpha = 0.4,            # increase transparency
linetype = 'longdash',  # dashed line instead of solid line
fullrange = TRUE,       # extend line to span x-axis
se = FALSE)             # remove confidence level
p2
# set size of text for axis and for titles
p3 <- p2 + labs(x = "log Genome Size / pg ", y = "log Body Weight / g") +
theme(axis.title = element_text(size = 16))
p3
# SAVE FILE AS A PDF:
ggsave('../Results/DiagMod_ggplot.pdf', height=5, width=6)
######################################################
# (11) Plot model and add regression lines using ggplot2 # Newly Added
library(ggplot2)
# basic plot
# differentiate Suborder by shape and color
p1 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_point(aes(shape = Suborder, color = Suborder), size = 4) + # increase size of plot characters to show overlap
scale_shape(solid = FALSE) + # outline of plot character
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 +
geom_smooth(aes(color = Suborder),
method = 'lm',          # linear regression
alpha = 0.4,            # increase transparency
linetype = 'longdash',  # dashed line instead of solid line
fullrange = TRUE,       # extend line to span x-axis
se = FALSE)             # remove confidence level
p2
# set size of text for axis and for titles
p3 <- p2 + labs(x = "log Genome Size / pg ", y = "log Body Weight / g") +
theme(axis.title = element_text(size = 16))
p3
# SAVE FILE AS A PDF:
ggsave('../Results/DiagMod_ggplot.pdf', height=5, width=6)
