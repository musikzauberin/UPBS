# (6) get the columns of the transformed variables and repeat pairs and cor
logmorpho <- c(17,18,19,20,21)
# pair plots of log variables
pairs(genome[, logmorpho], col=genome$Suborder)
# correlation coefficient for log variables
cor(genome[, logmorpho], use='pairwise')
# (7) fit the null and genome size model for dragonflies
nullModDragon <- lm(logBW ~ 1, data=genome, subset=Suborder=='Anisoptera')
genomeSizeModelDragon <- lm(logBW ~ logGS, data=genome, subset=Suborder=='Anisoptera')
summary(genomeSizeModelDragon)
anova(genomeSizeModelDragon)
# residual sums of squares for the two models
sum(resid(nullModDragon)^2)
sum(resid(genomeSizeModelDragon)^2)
# (8) fit the genome size model for damselflies
genomeSizeModelDamsel <- lm(logBW ~ logGS, data=genome, subset=Suborder=='Zygoptera')
summary(genomeSizeModelDamsel)
anova(genomeSizeModelDamsel)
# (9) Examine model diagnostics
# pdf("../Results/DiagModDragon.pdf")
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 1.5))
plot(genomeSizeModelDragon)
# dev.off()
# pdf("../Results/DiagModDamsel.pdf")
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 1.5))
plot(genomeSizeModelDamsel)
# dev.off()
# (10) Plot the model and add regression lines
pdf("../Results/DiagMod.pdf")
myCol <- c('red','blue')
plot(logBW ~ logGS, data=genome, col=myCol[Suborder], xlab='log Genome Size (pg)', ylab='log Body Weight (g)')
abline(genomeSizeModelDragon, col='red')
abline(genomeSizeModelDamsel, col='blue')
dev.off()
######################################################
# (9) Plot model and add regression lines using ggplot2 # Newly Added
library(ggplot2)
# (11) Plot model and add regression lines using ggplot2 # Newly Added
library(ggplot2)
# basic plot
# differentiate Suborder by shape
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point()
p1
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 3)
p1
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 4, alpha = 0.8)
p1
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 4, alpha = 0.4)
p1
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 4, alpha = 0.6)
p1
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 4, alpha = 0.6) + theme_set(theme_grey())
p1
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 4, alpha = 0.6) + theme_set(theme_grey())
p1
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 4, alpha = 0.6)
p1
# differentiate Suborder by shape and color
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 4, alpha = 0.6)
p1
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 4, alpha = 0.6) + # edit size and transparency of plot characters
theme_set(theme_bw()) # black and white background
p1
p1 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_point(size = 4, alpha = 0.6) + # edit size and transparency of plot characters
theme_set(theme_bw()) # black and white background
p1
p2 <- p1 + geom_smooth(model=genomeSizeModelDragon)
p2
p2 <- p1 + geom_smooth(model=genomeSizeModelDragon)
p2
p2 <- p1 + geom_smooth(genomeSizeModelDragon)
p2
p2 <- p1 + geom_smooth(genomeSizeModelDragon, method = x)
p2
p2 <- p1 + geom_smooth(model = genomeSizeModelDragon, method = x)
p2
p2 <- p1 + geom_quantile(model = genomeSizeModelDragon, method = x)
p2
p2 <- p1 + geom_quantile(model = genomeSizeModelDragon)
p2
p2 <- p1 + geom_quantile(model = genomeSizeModelDragon)
p2
# This script uses genome size and morphology data to explore
# t tests and F tests in R
# Added plotting scatterplots using ggplot2 # Newly Added
################################################
# Set Directory
getwd()
setwd("/Users/jialelim/Documents/github/UPBS/newCode")
################################################
######################## (1) ##########################
# LOAD THE DATA FROM THE CSV TEXT FILE INTO A DATA FRAME:
genome <- read.csv('../Data/GenomeSize.csv') #assumes that you are working from your Code directory
######################## (2) ##########################
# LOOK AT AND MANIPULATE THE DATA:
head(genome)
str(genome) # Check what the data columns contain
tapply(genome$BodyWeight, genome$Suborder, mean) # take a quick mean
tapply(genome$BodyWeight, genome$Suborder, mean, na.rm=TRUE)
tapply(genome$BodyWeight, genome$Suborder, length)
tapply(genome$BodyWeight, genome$Suborder, var, na.rm=TRUE)
#You can also remove NA's by subsetting (using weight as an example):
BodyWt_no_NA <- subset(genome, !is.na(BodyWeight))
str(BodyWt_no_NA)
######################## (3) ##########################
# LOOK AT A SUMMARY OF THE DATA:
summary(genome) #Note that each column gets a separate summary!
######################## (4) ##########################
# VISUALISE THE DISTRIBUTION OF THE SAMPLES OF YOUR FOCAL VARIABLE:
hist(genome$GenomeSize, breaks=10)
plot(density(genome$GenomeSize, bw=0.1))
######################## (5) ##########################
# COMPARE TWO DISTRIBUTIONS OF FACTORS OF INTEREST USING BOXPLOTS:
plot(GenomeSize ~ Suborder, data=genome)
#You can also use plot(Genome$GenomeSize ~ Genome$Suborder)
######################## (6) ##########################
# COMPARE THE TWO DISTRIBUTIONS USING DENSITY PLOTS:
# First, get two small datasets, one for each order
Anisoptera <- subset(genome, Suborder=='Anisoptera') #The dragonflies
Zygoptera <- subset(genome, Suborder=='Zygoptera') #The damselflies
# Now plot the first suborder and add a line for the second, adjusting
# x and y axis limits to accommodate both curves
plot(density(Zygoptera$GenomeSize), xlim=c(0.1, 2.7), ylim=c(0,1.7))
lines(density(Anisoptera$GenomeSize), col='red')
######################## (7) ##########################
# PLOT ONE VARIABLE AGAINST ANOTHER USING SCATTERPLOTS:
hist(genome$TotalLength) #Check the distribution of your new variable of interest
plot(GenomeSize ~ TotalLength, data = genome) #Now plot
plot(GenomeSize ~ BodyWeight, data = genome) #Another example, using weight instead
######################## (8) ##########################
# SEPARATE SCATTERS BY SUBORDERS
str(genome$Suborder) #Confirm that there are two levels under suborders
myColours <- c('red', 'blue') # So choose two colours
mySymbols <- c(1,3) # And two different markers
plot(GenomeSize ~ TotalLength , data = genome, #Now plot again
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend(40,2, legend=levels(genome$Suborder), #Add legend at coordinate 40,2
col= myColours, pch = mySymbols)
######################## (9) ##########################
# SAVE FILE AS A PDF:
pdf('../Results/GenomeSize.pdf', height=5, width=6) #Open the pdf file
plot(GenomeSize ~ TotalLength, data = genome,
col=myColours[Suborder], pch=mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend(40,2, legend=levels(genome$Suborder),
col= myColours, pch = mySymbols)
dev.off() #Close the pdf file
######################################################
# Newly added
# (9) Plot scatterplots using ggplot2
library(ggplot2)
# basic plot
# differentiate Suborder by shape
p1 <- ggplot(genome, aes(x = TotalLength, y = GenomeSize, shape = Suborder)) +
geom_point()
p1
# differentiate Suborder by color
p1 <- ggplot(genome, aes(x = TotalLength, y = GenomeSize, color = Suborder)) +
geom_point()
p1
# differentiate Suborder by color and shape
p1 <- ggplot(genome, aes(x = TotalLength, y = GenomeSize, color = Suborder, shape = Suborder)) +
geom_point()
p1
# manually adjust size and shape of plot character
p2 <- ggplot(genome, aes(x = TotalLength, y = GenomeSize, shape = Suborder, color = Suborder)) +
geom_point(size = 3)  + # increase plot character size
scale_shape_manual(values = c(1,3)) # change plot character shape
p2
# change plot background/theme
p3 <- p2 + theme_set(theme_bw())
p3
# set size of text for axis and for titles
text <- element_text(size = 14)
bold.16.text <- element_text(face = "bold", size = 16)
p4 <- p3 + labs(title = "Damselflies and Dragonflies", x = "Total Length / mm ", y = "Genome Size / pg ") +
theme(title = bold.16.text, axis.title = bold.16.text, axis.text = text)
p4
# SAVE FILE AS A PDF:
ggsave('../Results/GenomeSize_ggplot2.pdf', height=5, width=6)
# Set Directory
getwd()
setwd("/Users/jialelim/Documents/github/UPBS/newCode")
################################################
# This script uses genome size and morphology data to explore regression in R
# (1) Load the data
genome <- read.csv('../Data/GenomeSize.csv')
# (2) look at pairwise plots of all variables
pairs(genome)
# (3) identify the column numbers of five key variables and produce pairs plots
morpho <- c(4,7,8,12,14)
pairs(genome[, morpho], col=genome$Suborder)
# (4) Look at pairwise correlation coefficients and a correlation test
cor(genome[, morpho], use='pairwise')
cor.test(genome$GenomeSize, genome$TotalLength, use='pairwise')
# (5) log transform the key variables
genome$logGS <- log(genome$GenomeSize)
genome$logBW <- log(genome$BodyWeight)
genome$logTL <- log(genome$TotalLength)
genome$logFL <- log(genome$ForewingLength)
genome$logFA <- log(genome$ForewingArea)
str(genome)
# (6) get the columns of the transformed variables and repeat pairs and cor
# pair plots of log variables
logmorpho <- c(17,18,19,20,21)
pairs(genome[, logmorpho], col=genome$Suborder)
# correlation coefficient for log variables
cor(genome[, logmorpho], use='pairwise')
# (7) fit the null and genome size model for dragonflies
nullModDragon <- lm(logBW ~ 1, data=genome, subset=Suborder=='Anisoptera')
genomeSizeModelDragon <- lm(logBW ~ logGS, data=genome, subset=Suborder=='Anisoptera')
summary(genomeSizeModelDragon)
anova(genomeSizeModelDragon)
# residual sums of squares for the two models
sum(resid(genomeSizeModelDragon)^2)
sum(resid(nullModDragon)^2)
# (8) fit the genome size model for damselflies
genomeSizeModelDamsel <- lm(logBW ~ logGS, data=genome, subset=Suborder=='Zygoptera')
summary(genomeSizeModelDamsel)
anova(genomeSizeModelDamsel)
# (9) Examine model diagnostics
# pdf("../Results/DiagModDragon.pdf")
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 1.5))
plot(genomeSizeModelDragon)
# dev.off()
# pdf("../Results/DiagModDamsel.pdf")
par(mfrow = c(2, 2), mar = c(5, 5, 1.5, 1.5))
plot(genomeSizeModelDamsel)
# dev.off()
# (10) Plot the model and add regression lines
pdf("../Results/DiagMod.pdf")
myCol <- c('red','blue')
plot(logBW ~ logGS, data=genome, col=myCol[Suborder], xlab='log Genome Size (pg)', ylab='log Body Weight (g)')
abline(genomeSizeModelDragon, col='red')
abline(genomeSizeModelDamsel, col='blue')
dev.off()
######################################################
# (11) Plot model and add regression lines using ggplot2 # Newly Added
library(ggplot2)
# basic plot
# differentiate Suborder by shape and color
p1 <- ggplot(genome, aes(x = logGS)) +
geom_point(aes(y = logBW, shape = Suborder, color = Suborder), size = 4, alpha = 0.6) + # increase size and transparency of plot characters to show overlap
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 + geom_quantile(model = genomeSizeModelDragon)
p2
p2 <- p1 + geom_quantile(x = logGS, y = logBW, model = genomeSizeModelDragon)
p2
p2 <- p1 + geom_quantile(genome, aes(x = logGS, y = logBW), model = genomeSizeModelDragon)
p2
p2 <- p1 + geom_quantile(genome, model = genomeSizeModelDragon)
p2
p1 <- ggplot(genome, aes(x = logGS)) +
geom_point(aes(y = logBW, shape = Suborder, color = Suborder), size = 4, alpha = 0.6) + # increase size and transparency of plot characters to show overlap
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 + geom_quantile(genome, model = genomeSizeModelDragon)
p2
p2 <- ggplot(genome, aes(x = logGS, y = logBW, shape = Suborder, color = Suborder)) +
geom_quantile(genome, model = genomeSizeModelDragon)
p2 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_quantile(genome, model = genomeSizeModelDragon)
p2
p2 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_quantile(model = genomeSizeModelDragon)
p2
geom_quantile(model = genomeSizeModelDragon, aes(x = logGS, y = logBW))
p2 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_quantile(model = genomeSizeModelDragon, aes(x = logGS, y = logBW))
p2
p2 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_quantile(model = genomeSizeModelDragon, aes(x = logGS, y = logBW))
p2
p2 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_smooth(model = genomeSizeModelDragon, aes(x = logGS, y = logBW))
p2
p2 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_smooth(model = genomeSizeModelDragon)
p2
p2 <- p1 + geom_smooth(model = genomeSizeModelDragon)
p2
p1 <- ggplot(genome, aes(x = logGS)) +
geom_point(aes(y = logBW, shape = Suborder, color = Suborder), size = 4, alpha = 0.6) + # increase size and transparency of plot characters to show overlap
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 + geom_smooth(model = genomeSizeModelDragon)
p2
p2 <- p1 + geom_smooth(genomeSizeModelDragon)
p2
p2 <- p1 + geom_smooth()
p2
p1 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_point(aes(shape = Suborder, color = Suborder), size = 4, alpha = 0.6) + # increase size and transparency of plot characters to show overlap
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 + geom_smooth()
p2
p1 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_point(aes(shape = Suborder, color = Suborder), size = 4, alpha = 0.6) + # increase size and transparency of plot characters to show overlap
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 + geom_smooth(aes(color = Suborder))
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm')
p2
p1 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_point(aes(shape = Suborder, color = Suborder), size = 4, alpha = 0.6) + # increase size and transparency of plot characters to show overlap
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm')
p2
# set size of text for axis and for titles
p3 <- p2 + labs(x = "log Genome Size / pg ", y = "log Body Weight / g") +
theme(axis.title = element_text(size = 16))
p3
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.6)
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.6)
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.4)
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.4, linetype = dotted)
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.4, linetype = 'dotted')
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.4, linetype = 'longdash')
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.4, linetype = 'longdash', show.legend = FALSE)
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.4, linetype = 'longdash', show.legend = 'FALSE')
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.4, linetype = 'longdash', show.legend = NA)
p2
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.4, linetype = 'longdash')
p2
# set size of text for axis and for titles
p3 <- p2 + labs(x = "log Genome Size / pg ", y = "log Body Weight / g") +
theme(axis.title = element_text(size = 16))
p3
pdf('../Results/DiagMod_ggplot.pdf', height=5, width=6) #Open the pdf file
pdf('../Results/DiagMod_ggplot.pdf', height=5, width=6) #Open the pdf file
ggsave('../Results/DiagMod_ggplot.pdf', height=5, width=6) #Open the pdf file
p2 <- p1 + geom_smooth(aes(color = Suborder), method = 'lm', alpha = 0.4, linetype = 'longdash', fullrange = TRUE)
p2
p2 <- p1 +
geom_smooth(aes(color = Suborder),
method = 'lm',          # linear regression
alpha = 0.4,            # increase transparency
linetype = 'longdash',  # dashed line instead of solid line
fullrange = TRUE)       # extend line to span x-axis
p2
# set size of text for axis and for titles
p3 <- p2 + labs(x = "log Genome Size / pg ", y = "log Body Weight / g") +
theme(axis.title = element_text(size = 16))
p3
# SAVE FILE AS A PDF:
ggsave('../Results/DiagMod_ggplot.pdf', height=5, width=6) #Open the pdf file
library(ggplot2)
# basic plot
# differentiate Suborder by shape and color
p1 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_point(aes(shape = Suborder, color = Suborder), size = 4, alpha = 0.6) + # increase size and transparency of plot characters to show overlap
scale_shape(solid = FALSE) + # outline of plot character
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 +
geom_smooth(aes(color = Suborder),
method = 'lm',          # linear regression
alpha = 0.4,            # increase transparency
linetype = 'longdash',  # dashed line instead of solid line
fullrange = TRUE)       # extend line to span x-axis
p2
# set size of text for axis and for titles
p3 <- p2 + labs(x = "log Genome Size / pg ", y = "log Body Weight / g") +
theme(axis.title = element_text(size = 16))
p3
# SAVE FILE AS A PDF:
ggsave('../Results/DiagMod_ggplot.pdf', height=5, width=6) #Open the pdf file
p1 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_point(aes(shape = Suborder, color = Suborder), size = 4) + # increase size and transparency of plot characters to show overlap
scale_shape(solid = FALSE) + # outline of plot character
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 +
geom_smooth(aes(color = Suborder),
method = 'lm',          # linear regression
alpha = 0.4,            # increase transparency
linetype = 'longdash',  # dashed line instead of solid line
fullrange = TRUE)       # extend line to span x-axis
p2
# set size of text for axis and for titles
p3 <- p2 + labs(x = "log Genome Size / pg ", y = "log Body Weight / g") +
theme(axis.title = element_text(size = 16))
p3
# SAVE FILE AS A PDF:
ggsave('../Results/DiagMod_ggplot.pdf', height=5, width=6) #Open the pdf file
# differentiate Suborder by shape and color
p1 <- ggplot(genome, aes(x = logGS, y = logBW)) +
geom_point(aes(shape = Suborder, color = Suborder), size = 4) + # increase size of plot characters to show overlap
scale_shape(solid = FALSE) + # outline of plot character
theme_set(theme_bw()) # black and white background
p1
# add regression lines
p2 <- p1 +
geom_smooth(aes(color = Suborder),
method = 'lm',          # linear regression
alpha = 0.4,            # increase transparency
linetype = 'longdash',  # dashed line instead of solid line
fullrange = TRUE)       # extend line to span x-axis
p2
# set size of text for axis and for titles
p3 <- p2 + labs(x = "log Genome Size / pg ", y = "log Body Weight / g") +
theme(axis.title = element_text(size = 16))
p3
# SAVE FILE AS A PDF:
ggsave('../Results/DiagMod_ggplot.pdf', height=5, width=6) #Open the pdf file
p2 <- p1 +
geom_smooth(aes(color = Suborder),
method = 'lm',          # linear regression
alpha = 0.4,            # increase transparency
linetype = 'longdash',  # dashed line instead of solid line
fullrange = TRUE,       # extend line to span x-axis
se = FALSE)             # remove confidence level
p2
# set size of text for axis and for titles
p3 <- p2 + labs(x = "log Genome Size / pg ", y = "log Body Weight / g") +
theme(axis.title = element_text(size = 16))
p3
# SAVE FILE AS A PDF:
ggsave('../Results/DiagMod_ggplot.pdf', height=5, width=6) #Open the pdf file
# Set Directory
getwd()
setwd("/Users/jialelim/Documents/github/UPBS/newCode")
################################################
# 1) Load the data
colonies <- read.csv("../Data/PracData.csv")
str(colonies)
# 2) Look at all the data
boxplot(ColonyCount ~ Treatment, data=colonies)
colonies$logCC <- log(colonies$ColonyCount + 1)
boxplot(logCC ~ Treatment, data=colonies)
# 3) Check the variation i colony count across treatments
tapply(colonies$ColonyCount, colonies$Treatment, min, na.rm=TRUE)
tapply(colonies$ColonyCount, colonies$Treatment, max, na.rm=TRUE)
# 4) Subset the data down to control and NG
coloniesCN <- subset(colonies, Treatment %in% c('Control', 'NG'), drop=TRUE)
str(coloniesCN)
# remove the unused levels
coloniesCN <- droplevels(coloniesCN)
str(coloniesCN)
# 5) Look at the strains by treament
library(lattice)
bwplot(logCC ~ Strain | Treatment, data=coloniesCN)
# alternatively, get a barplot
tab <- tapply(coloniesCN$ColonyCount, list(coloniesCN$Treatment,
coloniesCN$Strain), mean, na.rm=TRUE)
barplot(tab, beside=TRUE)
# 5) Look at the strains by treament
library(lattice)
bwplot(logCC ~ Strain | Treatment, data=coloniesCN)
library(lattice)
bwplot(logCC ~ Strain | Treatment, data=coloniesCN)
# alternatively, get a barplot
tab <- tapply(coloniesCN$ColonyCount, list(coloniesCN$Treatment,
coloniesCN$Strain), mean, na.rm=TRUE)
barplot(tab, beside=TRUE)
getwd()
setwd("/Users/jialelim/Documents/github/UPBS/newCode")
################################################
# 1) Load the data
colonies <- read.csv("../Data/PracData.csv")
str(colonies)
# 2) Look at all the data
boxplot(ColonyCount ~ Treatment, data=colonies)
colonies$logCC <- log(colonies$ColonyCount + 1)
boxplot(logCC ~ Treatment, data=colonies)
# 3) Check the variation i colony count across treatments
tapply(colonies$ColonyCount, colonies$Treatment, min, na.rm=TRUE)
tapply(colonies$ColonyCount, colonies$Treatment, max, na.rm=TRUE)
# 4) Subset the data down to control and NG
coloniesCN <- subset(colonies, Treatment %in% c('Control', 'NG'), drop=TRUE)
str(coloniesCN)
# remove the unused levels
coloniesCN <- droplevels(coloniesCN)
str(coloniesCN)
# 5) Look at the strains by treament
library(lattice)
bwplot(logCC ~ Strain | Treatment, data=coloniesCN)
library(lattice)
bwplot(logCC ~ Strain | Treatment, data=coloniesCN)
bwplot(logCC ~ Strain | Treatment, data=coloniesCN)
